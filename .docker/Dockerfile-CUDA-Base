# ==================================================================
# module list
# ------------------------------------------------------------------
# Ubuntu           20.04
# OpenMPI          latest       (apt)
# CUDA             11.1
# CuDNN            8-dev
# cmake            3.16.3       (apt)
# MKL              2020.4-912   (apt)
# arrayfire        3.7.3        (git, CUDA backend)
# libsndfile       latest       (apt)
# FFTW             latest       (apt)
# KenLM            0c4dd4e      (git)
# GLOG             latest       (apt)
# gflags           latest       (apt)
# python3          latest       (apt)
# ==================================================================

FROM nvidia/cuda:11.1-cudnn8-devel-ubuntu20.04 as cuda_base_builder

# If the driver is not found (during docker build) the cuda driver api need to be linked against the
# libcuda.so stub located in the lib[64]/stubs directory
RUN ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/lib/libcuda.so.1

ENV APT_INSTALL="apt-get install -y --no-install-recommends"
ENV DEBIAN_FRONTEND=noninteractive

RUN rm -rf /var/lib/apt/lists/* \
           /etc/apt/sources.list.d/cuda.list \
           /etc/apt/sources.list.d/nvidia-ml.list && \
    apt-get update && DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        build-essential \
        ca-certificates \
        wget \
        git \
        g++ \
        cmake \
        # for MKL
        apt-transport-https gpg-agent gnupg2 \
        # for kenlm
        libboost-thread-dev libboost-test-dev libboost-system-dev libboost-program-options-dev \
        # for arrayfire
        libboost-stacktrace-dev \
        # FFTW
        libfftw3-dev \
        # ssh for OpenMPI
        openssh-server openssh-client \
        # for OpenMPI
        libopenmpi-dev openmpi-bin \
        # for kenlm
        zlib1g-dev libbz2-dev liblzma-dev && \
# ==================================================================
# clean up everything
# ------------------------------------------------------------------
    apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/*

#############################################################################
#                                DEPS IMAGES                                #
#############################################################################

FROM cuda_base_builder as cuda_arrayfire
# ==================================================================
# arrayfire with CUDA backend https://github.com/arrayfire/arrayfire/wiki/Build-Instructions-for-Linux#cuda-backend-dependencies
# ------------------------------------------------------------------
RUN cd /tmp && \
    git clone --branch v3.7.3 --depth 1 --recursive --shallow-submodules https://github.com/arrayfire/arrayfire.git && \
    mkdir -p arrayfire/build && cd arrayfire/build && \
    CXXFLAGS=-DOS_LNX cmake .. -DCMAKE_BUILD_TYPE=Release \
                               -DCMAKE_INSTALL_PREFIX=/opt/arrayfire \
                               -DAF_BUILD_CUDA=ON \
                               -DAF_BUILD_CPU=OFF \
                               -DAF_BUILD_OPENCL=OFF \
                               -DAF_BUILD_EXAMPLES=OFF \
                               -DAF_WITH_IMAGEIO=OFF \
                               -DBUILD_TESTING=OFF \
                               -DAF_BUILD_DOCS=OFF && \
    make install -j$(nproc)


FROM cuda_base_builder as cuda_kenlm
# ==================================================================
# KenLM https://github.com/kpu/kenlm
# ------------------------------------------------------------------
RUN cd /tmp && git clone https://github.com/kpu/kenlm.git && \
    cd kenlm && git checkout 0c4dd4e && \
    mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release \
             -DCMAKE_INSTALL_PREFIX=/opt/kenlm \
             -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \
    make install -j$(nproc)

#############################################################################
#                             FINAL IMAGE                                   #
#############################################################################

FROM cuda_base_builder as cuda_final

RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive $APT_INSTALL \
        vim \
        emacs \
        nano \
        htop \
        # nccl: for flashlight
        libnccl2 libnccl-dev \
        # libsndfile
        libsndfile1-dev \
        # for Intel's Math Kernel Library (MKL)
        cpio \
        # gflags
        libgflags-dev libgflags2.2 \
        # for glog
        libgoogle-glog-dev libgoogle-glog0v5 \
        # python sox
        sox python3-dev python3-pip python3-distutils && \
        # python (for bindings and preprocessing)
        python3 -m pip --no-cache-dir install --upgrade setuptools numpy sox tqdm && \
# ==================================================================
# clean up everything
# ------------------------------------------------------------------
    apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/*
# ==================================================================
# MKL https://software.intel.com/en-us/mkl
# ------------------------------------------------------------------
RUN cd /tmp && wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' && \
    apt-get update && DEBIAN_FRONTEND=noninteractive $APT_INSTALL intel-mkl-64bit-2020.4-912 && \
# ==================================================================
# clean up everything
# ------------------------------------------------------------------
    apt-get clean && \
    apt-get -y autoremove && \
    rm -rf /var/lib/apt/lists/* /tmp/*


COPY --from=cuda_arrayfire  /opt/arrayfire  /opt/arrayfire
COPY --from=cuda_kenlm      /opt/kenlm      /opt/kenlm

ENV KENLM_ROOT=/opt/kenlm
