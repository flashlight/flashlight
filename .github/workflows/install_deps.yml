on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
      os:
        required: true
        type: string
      backend:
        required: true
        type: string
      autograd_backend:
        required: true
        type: string

jobs:
  install_deps:
    name: "Install dependencies on ${{ inputs.runner }} | tensor: ${{ inputs.backend }} | autograd: ${{ inputs.autograd_backend }}"
    runs-on: ${{ inputs.runner }}
    steps:
      # ]----- Backend dependencies
      # ArrayFire
      - name: "Install ArrayFire (Linux)"
        run: |
          sudo apt update
          sudo apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
          echo "deb [arch=amd64] https://repo.arrayfire.com/debian all main" | sudo tee /etc/apt/sources.list.d/arrayfire.list
          sudo apt update
          sudo apt install arrayfire-cmake=3.8.1-2 arrayfire-headers=3.8.1-2 arrayfire-cpu3-mkl=3.8.1-2 arrayfire-cpu3-dev=3.8.1-2
        if: inputs.os == 'Linux' && inputs.backend == 'ArrayFire'
      - name: "Install ArrayFire (macOS)"
        run: brew install arrayfire
        if: inputs.os == 'macOS' && inputs.backend == 'ArrayFire'
      - name: "Install ArrayFire (Windows)"
        run: |
          choco install --no-progress wget -y
          cd $HOME
          INSTALLER_NAME="ArrayFire-v3.8.1-CUDA-11.4.exe"
          wget --quiet https://arrayfire.s3.amazonaws.com/3.8.1/$INSTALLER_NAME
          7z.exe x $INSTALLER_NAME -o"C:\Program Files\ArrayFire" -y
          rm $INSTALLER_NAME
        if: inputs.os == 'Windows' && inputs.backend == 'ArrayFire'
      # oneDNN
      - name: Install oneDNN 2.7.2 with microconda
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: false
          environment-name: flashlight
          channels: conda-forge
          extra-specs: onednn=2.7.2
        if: inputs.backend == 'oneDNN' || inputs.autograd_backend == 'oneDNN'
