name: Build Flashlight"

on: [push, pull_request]

jobs:
  build:
    name: "Build on ${{ matrix.os }} | tensor: ${{ matrix.backend }} | autograd: ${{ matrix.autograd_backend }}"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2022, macOS-12]
        backend: [ArrayFire, oneDNN]
        autograd_backend: [oneDNN]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v3

      # Build dependencies
      - name: "Install build dependencies (Linux)"
        run: |
          sudo apt update
          sudo apt install -y cmake build-essential ninja-build
          sudo apt install -y gnupg2 ca-certificates apt-utils software-properties-common
        if: runner.os == 'Linux'
      - name: "Install build dependencies (Windows)"
        run: choco install cmake ninja wget
        if: runner.os == 'Windows'
      - name: "Install build dependencies (macOS)"
        run: brew install cmake ninja
        if: runner.os == 'macOS'

      # ]----- Backend dependencies
      # ArrayFire
      - name: "Install ArrayFire on Linux"
        run: |
          sudo apt update
          sudo apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
          echo "deb [arch=amd64] https://repo.arrayfire.com/debian all main" | sudo tee /etc/apt/sources.list.d/arrayfire.list
          sudo apt update
          sudo apt install arrayfire-cmake=3.8.1-2 arrayfire-headers=3.8.1-2 arrayfire-cpu3-mkl=3.8.1-2 arrayfire-cpu3-dev=3.8.1-2
        if: runner.os == 'Linux' && matrix.backend == 'ArrayFire'
      - name: "Install ArrayFire on macOS"
        run: brew install arrayfire
        if: runner.os == 'macOS' && matrix.backend == 'ArrayFire'
      - name: "Install ArrayFire on Windows"
        run: |
          cd /tmp
          wget -q https://arrayfire.s3.amazonaws.com/3.8.1/ArrayFire-v3.8.1_Linux_x86_64_CUDA-11.4.sh -O ArrayFire-v3.8.1_Linux_x86_64_CUDA-11.4.sh
          bash ArrayFire-v3.8.1_Linux_x86_64_CUDA-11.4.sh --skip-license
        if: runner.os == 'Windows' && matrix.backend == 'ArrayFire'
      # oneDNN
      - name: Install oneDNN 2.7.2 with microconda
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: false
          environment-name: flashlight
          channels: conda-forge
          extra-specs: onednn=2.7.2
        if: matrix.backend == 'oneDNN' || matrix.autograd_backend == 'oneDNN'

      # Build Flashlight
      - name: "Configure Flashlight"
        run: |
          cmake -S . -B build -G Ninja \
            -DFL_USE_ARRAYFIRE=${{ matrix.backend == 'ArrayFire' && 'ON' || 'OFF'  }} \
            -DFL_ARRAYFIRE_USE_CPU=${{ matrix.backend == 'ArrayFire' && 'ON' || 'OFF'  }} \
            -DFL_USE_ONEDNN=${{ (matrix.backend == 'oneDNN' || matrix.autograd_backend == 'oneDNN') && 'ON' || 'OFF'  }} \
            -DFL_BUILD_DISTRIBUTED=OFF
      - name: "Build Flashlight"
        run: |
          ninja -C build
