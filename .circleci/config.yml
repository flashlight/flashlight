# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

version: 2.1

gpu: &gpu
  machine:
    image: ubuntu-2004-cuda-11.4:202110-01
  resource_class: gpu.nvidia.large

orbs:
  win: circleci/windows@5.0.0

executors:
  linux:
    machine:
      image: ubuntu:2004
    resource_class: 2xlarge
  linux-gpu:
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.medium
  macos:
    macos:
      xcode: "13.4.1"
    resource_class: large
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
  windows:
    machine:
      image: win/default
    shell: bash.exe
  windows-gpu:
    machine:
      image: win/server-2019-cuda
    shell: bash.exe

commands:
  install-build-dependencies:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["macos", << parameters.platform >>]
          steps:
            - run:
                name: "Install CMake from Homebrew"
                command: brew install cmake
      - when:
          condition:
            or:
              - equal: ["windows", << parameters.platform >>]
              - equal: ["windows-gpu", << parameters.platform >>]
          steps:
            - run:
                name: "Install CMake from Choco"
                command: choco install cmake

  setup-cuda:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux-gpu", << parameters.platform >>]
          steps:
            - run:
                name: "Add CUDA 11.4 bin directory to PATH"
                command: |
                  echo 'export PATH="${PATH}:/usr/local/cuda-11.4/bin"' >> "$BASH_ENV"
      - when:
          condition:
            equal: ["windows-gpu", << parameters.platform >>]
          steps:
            - run:
                name: "Add CUDA 11.4 bin directory to PATH"
                command: |
                  echo "TODO: FIXME -- do we need to install CUDA? choco?"
                  echo '' >> "$BASH_ENV"

  install-intel-libraries:
    parameters:
      platform:
        type: executor
      backend:
        type: string
    steps:
      - when:
          condition:
            or:
              - equal: ["linux-gpu", << parameters.platform >>]
              - equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Setup Intel apt PPA"
                command: |
                  wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
                  sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
                  sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'
                  sudo apt update
            - when:
                condition:
                  or:
                    - equal: ["arrayfire", << parameters.backend >>]
                    - equal: ["onednn", << parameters.backend >>]
                steps:
                  - run:
                      name: "Install Intel MKL"
                      command: sudo apt install intel-mkl-full
            - when:
                condition:
                  equal: ["onednn", << parameters.backend >>]
                steps:
                  - run:
                      name: "Install Intel MKL"
                      command: sudo apt install intel-onednn-dev
      - when:
          condition:
            equal: ["macos", << parameters.platform >>]
          steps:
            - when:
                condition:
                  equal: ["onednn", << parameters.backend >>]
                steps:
                  - run:
                      name: "Install Intel MKL"
                      command: brew install onednn

  install-arrayfire:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            or:
              - equal: ["linux-gpu", << parameters.platform >>]
              - equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire 3.8.1 PPA and prerequisites"
                command: |
                  sudo apt update
                  sudo apt install -y gnupg2 ca-certificates apt-utils software-properties-common
                  sudo apt update
                  sudo apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
                  echo "deb [arch=amd64] https://repo.arrayfire.com/debian all main" | sudo tee /etc/apt/sources.list.d/arrayfire.list
                  sudo apt update
                  sudo apt install  arrayfire-cmake=3.8.1-2 arrayfire-headers=3.8.1-2
      - when:
          condition:
            equal: ["linux-gpu", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire 3.8.1 with CUDA 11.4"
                command: |
                  sudo apt install arrayfire-cuda3-cuda-11-4=3.8.1-2 arrayfire-cuda3-dev=3.8.1-2
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire 3.8.1 with MKL"
                command: |
                  sudo apt install arrayfire-cpu3-mkl=3.8.1-2 arrayfire-cpu3-dev=3.8.1-2
      - when:
          condition:
            equal: ["macos", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire 3.8.1"
                command: brew install arrayfire

  install-cudnn:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux-gpu", << parameters.platform >>]
          steps:
            - run:
                name: "Install cuDNN 8.5.0.96 for CUDA 11.7"
                command: |
                  cd /tmp
                  wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8_8.5.0.96-1+cuda11.7_amd64.deb
                  wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8-dev_8.5.0.96-1+cuda11.7_amd64.deb
                  sudo dpkg -i libcudnn8_8.5.0.96-1+cuda11.7_amd64.deb libcudnn8-dev_8.5.0.96-1+cuda11.7_amd64.deb
      - when:
          condition:
            equal: ["windows-gpu", << parameters.platform >>]
          steps:
            - run:
                name: "Install cuDNN 8.5.0.96 for CUDA 11.7"
                command: |
                  echo "TODO: FIXME - install cuDNN, maybe use choco CUDA"

  build_flashlight:
    parameters:
      platform:
        type: string
      backend:
        type: string
    steps:
      - run:
          name: "Build Flashlight"
          command: |
            export FL_USE_ARRAYFIRE=$(if [[ ${backend} -eq "arrayfire" ]]; then echo "ON"; else echo "OFF"; fi)
            export FL_USE_ONEDNN=$(if [[ ${backend} -eq "onednn" ]]; then echo "ON"; else echo "OFF"; fi)
            export FL_ARRAYFIRE_USE_CUDA=$(if [[ ${platform} == *"-gpu" ]]; then echo "ON"; else echo "OFF"; fi)
            export FL_ARRAYFIRE_USE_CPU=$(if [[ ${platform} != *"-gpu" ]]; then echo "ON"; else echo "OFF"; fi)
            export FL_USE_CUDNN=$(if [[ ${platform} == *"-gpu" ]]; then echo "ON"; else echo "OFF"; fi)
            export FL_BUILD_DISTRIBUTED="OFF"

            cmake -S . -B build \
              -DFL_USE_ARRAYFIRE=${FL_USE_ARRAYFIRE} \
              -DFL_ARRAYFIRE_USE_CUDA=${FL_ARRAYFIRE_USE_CUDA} \
              -DFL_ARRAYFIRE_USE_CPU=${FL_ARRAYFIRE_USE_CPU} \
              -DFL_USE_CUDNN=${FL_USE_CUDNN} \
              -DFL_USE_ONEDNN=${FL_USE_ONEDNN} \
              -DFL_BUILD_DISTRIBUTED=${FL_BUILD_DISTRIBUTED}
            cmake --build build --parallel

  test_flashlight:
    parameters:
      path:
        default: "OFF"
        type: string
    steps:
      - run:
          name: "Test Flashlight"
          command: |
            cd << parameters.path >>
            ctest --verbose --parallel 4

  ############################### Old Commands ###############################
  run_codecov_inside_nvidia_docker:
    parameters:
      coverage_flag:
        type: string
    steps:
      - run:
          name: "Get code coverage inside of NVIDIA Docker"
          command: |
            sudo docker exec -it --env CODECOV_TOKEN=$CODECOV_TOKEN flashlight bash -c "\
                DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends lcov curl && \
                cd /flashlight && \
                lcov --capture --directory . --output-file coverage.info && \
                lcov --remove coverage.info '/usr/*' --output-file coverage.info &&
                lcov --remove coverage.info '*/include/af/*' --output-file coverage.info && \
                lcov --remove coverage.info '*/gtest/*' --output-file coverage.info && \
                lcov --list coverage.info && \
                bash <(curl -s https://codecov.io/bash) -f coverage.info \
                -F << parameters.coverage_flag >> \
                -t $CODECOV_TOKEN \
                || echo 'Codecov did not collect coverage reports'"

############################ Jobs ############################
jobs:
  build-and-test-main:
    parameters:
      platform:
        type: string
      backend:
        type: string
    executor: << parameters.platform >>
    steps:
      - checkout
      - install-build-dependencies:
          platform: << parameters.platform >>
      - when:
          condition:
            or:
              - equal: ["linux-gpu", << parameters.platform >>]
              - equal: ["windows-gpu", << parameters.platform >>]
          steps:
            - setup-cuda:
                platform: << parameters.platform >>
      - when:
          condition:
            equal: ["arrayfire", << parameters.backend >>]
          steps:
            - install-arrayfire:
                platform: << parameters.platform >>
      - when:
          condition:
            or:
              - equal: ["linux-gpu", << parameters.platform >>]
              - equal: ["windows-gpu", << parameters.platform >>]
          steps:
            - install-cudnn:
                platform: << parameters.platform >>
      - install-intel-libraries:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
      - build_flashlight:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
      - test_flashlight:
          path: build/flashlight/fl/test

workflows:
  version: 2
  build-and-test-new:
    jobs:
      - build-and-test-main:
          name: "Build and Test << matrix.platform >> with << matrix.backend >>"
          matrix:
            parameters:
              # TODO: consider making `cpu, gpu` another matrix to iterate over
              # then get rid of all of the ors to just condition on the OS
              platform: [linux, linux-gpu, macos, windows, windows-gpu]
              backend: [arrayfire, onednn]
            exclude:
              - platform: linux-gpu
                backend: onednn
              - platform: windows-gpu
                backend: onednn
                # TODO: remove me
              - platform: windows
              - platform: windows-gpu
