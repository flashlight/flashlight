# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

version: 2.1

gpu: &gpu
  machine:
    image: ubuntu-2004-cuda-11.4:202110-01
  resource_class: gpu.nvidia.large

orbs:
  win: circleci/windows@5.0.0

executors:
  linux:
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.large
  windows:
    machine:
      image: windows-server-2019-nvidia:stable
    resource_class: windows.gpu.nvidia.medium
    shell: bash.exe
  macos-arm:
    macos:
      xcode: 14.2.0
    environment:
      HOMEBREW_NO_AUTO_UPDATE: "1"
    resource_class: macos.m1.large.gen1
  linux-arm:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: arm.2xlarge

commands:
  install-build-dependencies:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            or:
              - equal: ["macos", << parameters.platform >>]
              - equal: ["macos-arm", << parameters.platform >>]
          steps:
            - run:
                name: "Install CMake from Homebrew"
                command: brew install cmake
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Add MSVC CMake binary to PATH"
                command: |
                  echo 'export PATH="C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\CommonExtensions\Microsoft\CMake\CMake\bin\:${PATH}"' >> $BASH_ENV
            - run:
                name: "Remove old Windows SDK headers"
                # These old headers cause issues with /Zc:preprocessor - only use the latest version of the SDK headers
                command: |
                  export WINDOWS_SDK_HEADER_PATH="C:\Program Files (x86)\Windows Kits\10\Include"
                  ls "${WINDOWS_SDK_HEADER_PATH}" | head -n -1 | xargs -I{} rm -rf "${WINDOWS_SDK_HEADER_PATH}/{}"

  setup-cuda:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Add CUDA 11.4 bin directory to PATH"
                command: |
                  echo 'export PATH="/usr/local/cuda-11.4/bin:${PATH}"' >> "$BASH_ENV"
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - install-cuda:
                platform: << parameters.platform >>
            - run:
                name: "Remove CUDA 10.1 and copy new MSVC Build Customizations"
                command: |
                  export _MSVC_BUILDCUST_PATH="/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Microsoft/VC/v160/BuildCustomizations"
                  rm -rf /c/Program\ Files/NVIDIA\ GPU\ Computing\ Toolkit/CUDA/v10.1
                  for ext in props targets xml; do rm "${_MSVC_BUILDCUST_PATH}/CUDA 10.1.${ext}"; done
                  cp /c/Program\ Files/NVIDIA\ GPU\ Computing\ Toolkit/CUDA/v11.5/extras/visual_studio_integration/MSBuildExtensions/* "${_MSVC_BUILDCUST_PATH}"
                shell: bash.exe
            - run:
                name: "Set environment variables for CUDA"
                command: |
                  echo 'export CUDA_ROOT="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/"' >> $BASH_ENV
                  echo 'export CudaToolkitDir="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.5"' >> $BASH_ENV
                  echo 'export PATH="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/:${PATH}"' >> "$BASH_ENV"
                  echo 'export CUDA_PATH="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5"' >> "$BASH_ENV"
                shell: bash.exe

  install-arrayfire:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            or:
              - equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire 3.8.1 with CUDA 11.4"
                command: |
                  sudo apt update
                  sudo apt install -y gnupg2 ca-certificates apt-utils software-properties-common
                  sudo apt update
                  sudo apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
                  echo "deb [arch=amd64] https://repo.arrayfire.com/debian all main" | sudo tee /etc/apt/sources.list.d/arrayfire.list
                  sudo apt update
                  sudo apt install arrayfire-cmake=3.8.1-2 arrayfire-headers=3.8.1-2
                  sudo apt install arrayfire-cuda3-cuda-11-4=3.8.1-2 arrayfire-cuda3-dev=3.8.1-2

      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install 7zip and axel from choco"
                command: |
                  choco install --no-progress 7zip axel -y
            - run:
                name: "Download and Install ArrayFire 3.8.1"
                command: |
                  cd $HOME
                  export AF_INSTALLER_NAME="ArrayFire-v3.8.1-CUDA-11.4.exe"
                  axel --quiet -n 16 https://arrayfire.s3.amazonaws.com/3.8.1/$AF_INSTALLER_NAME
                  7z.exe x $AF_INSTALLER_NAME -o"C:\Program Files\ArrayFire" -y
                  rm $AF_INSTALLER_NAME
                shell: bash.exe

      - when:
          condition:
            equal: ["macos-arm", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire from Homebrew"
                command: brew install arrayfire

  install-cuda:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install wget from choco"
                command: |
                  choco install --no-progress wget -y
            - run:
                name: "Install CUDA 11.5"
                command: |
                  cd $HOME
                  # See  https://docs.nvidia.com/cuda/pdf/CUDA_Installation_Guide_Windows.pdf
                  export CUDA_INSTALLER_NAME="cuda_11.5.2_496.13_windows.exe"
                  wget --quiet https://developer.download.nvidia.com/compute/cuda/11.5.2/local_installers/$CUDA_INSTALLER_NAME
                  # List of CUDA install options is https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html
                  ./$CUDA_INSTALLER_NAME -s nvcc_11.5 cudart_11.5 cublas_dev_11.5 curand_dev_11.5 visual_studio_integration_11.5
                  rm $CUDA_INSTALLER_NAME
                shell: bash.exe

  install-cudnn:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Install cuDNN 8.5.0.96 for CUDA 11.7"
                command: |
                  cd /tmp
                  wget --quiet https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8_8.5.0.96-1+cuda11.7_amd64.deb
                  wget --quiet https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8-dev_8.5.0.96-1+cuda11.7_amd64.deb
                  sudo dpkg -i libcudnn8_8.5.0.96-1+cuda11.7_amd64.deb libcudnn8-dev_8.5.0.96-1+cuda11.7_amd64.deb
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install cuDNN 8.5.0.96 for CUDA 11.2"
                command: |
                  cd $HOME
                  export CUDNN_ZIP=cudnn-11.2-windows-x64-v8.1.1.33.zip
                  wget --quiet https://developer.download.nvidia.com/compute/redist/cudnn/v8.1.1/$CUDNN_ZIP
                  unzip $CUDNN_ZIP && rm $CUDNN_ZIP
                  cp -r cuda/* "$CUDA_ROOT"
                  rm -rf cuda/

  install-onednn:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["macos-arm", << parameters.platform >>]
          steps:
            - run:
                name: "Install Micromamba"
                command: |
                  brew install micromamba
                  echo 'export MAMBA_EXE="/opt/homebrew/bin/micromamba"' >> $BASH_ENV
                  echo 'export MAMBA_ROOT_PREFIX="$HOME/micromamba"' >> $BASH_ENV
                  echo '__mamba_setup="$(/opt/homebrew/bin/micromamba shell hook --shell bash --prefix ~/micromamba 2> /dev/null)"' >> $BASH_ENV
                  echo 'eval "$__mamba_setup"' >> $BASH_ENV
      - when:
          condition:
            equal: ["linux-arm", << parameters.platform >>]
          steps:
            - run:
                name: "Install Micromamba"
                command: |
                  sudo apt update
                  DEBIAN_FRONTEND=noninteractive sudo apt upgrade # needed for curl not to break
                  curl micro.mamba.pm/install.sh | bash
                  echo 'export MAMBA_EXE="$HOME/.local/bin/micromamba"' >> $BASH_ENV
                  echo 'export MAMBA_ROOT_PREFIX="$HOME/micromamba"' >> $BASH_ENV
                  echo '__mamba_setup="$($HOME/.local/bin/micromamba shell hook --shell bash --prefix ~/micromamba 2> /dev/null)"' >> $BASH_ENV
                  echo 'eval "$__mamba_setup"' >> $BASH_ENV
      - run:
          name: "Create micromamba environment for oneDNN"
          command: |
            micromamba create -n onednn -y
            echo "micromamba activate onednn" >> $BASH_ENV
      - run:
          name: "Install oneDNN"
          command: micromamba install -y -c conda-forge onednn=2.7.2

  # Primary job for installing all dependencies based on platform,
  # backend, and autograd backend impl
  install-all-dependencies:
    parameters:
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    steps:
      - install-build-dependencies:
          platform: << parameters.platform >>
      - setup-cuda:
          platform: << parameters.platform >>
      - when:
          condition:
            equal: ["arrayfire", << parameters.backend >>]
          steps:
            - install-arrayfire:
                platform: << parameters.platform >>
      - when:
          condition:
            equal: ["cudnn", << parameters.autograd_backend >>]
          steps:
            - install-cudnn:
                platform: << parameters.platform >>
      - when:
          condition:
            or:
              - equal: ["onednn", << parameters.backend >>]
              - equal: ["onednn", << parameters.autograd_backend >>]
          steps:
            - install-onednn:
                platform: << parameters.platform >>

  install-pkg-dependencies:
    parameters:
      pkg:
        type: string
      platform:
        type: string
    steps:
      - run:
          name: "Install gflags"
          command: sudo apt-get install -y libgflags-dev
      - run:
          name: "Install glog"
          command: sudo apt-get install -y libgoogle-glog-dev
      # Only the speech package explicitly requires external deps.
      # The text package installs flashlight-text automatically (as does speech)
      # and the vision package installs stb automatically.
      - when:
          condition:
            equal: ["speech", << parameters.pkg >>]
          steps:
            - when:
                condition:
                  equal: ["linux", << parameters.platform >>]
                steps:
                  - run:
                      name: "Install FFTW3"
                      command: sudo apt-get install libfftw3-dev
                  - run:
                      name: "Install libsndfile"
                      command: sudo apt-get install libsndfile1-dev
                  - run:
                      name: "Install BLAS library"
                      # TODO: add baselines with a few other BLAS libs pending
                      # conversion to use fl::matmul on CPU
                      command: sudo apt-get install libopenblas-dev

  build-flashlight-core:
    parameters:
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    steps:
      - run:
          name: "Build Flashlight"
          # Only run ArrayFire CUDA baselines in CI (only supported CUDA backend)
          command: |
            cmake -S . -B build \
              -DFL_USE_ARRAYFIRE=$([ "<< parameters.backend >>" == "arrayfire" ] && echo "ON" || echo "OFF") \
              -DFL_ARRAYFIRE_USE_CUDA=$([ "<< parameters.platform >>" == "windows" ] || [ "<< parameters.platform >>" == "linux" ] && echo "ON" || echo "OFF") \
              -DFL_ARRAYFIRE_USE_CPU=$([ "<< parameters.platform >>" == "macos-arm" ] || [ "<< parameters.platform >>" == "linux-arm" ] && echo "ON" || echo "OFF") \
              -DFL_USE_CUDNN=$([ "<< parameters.autograd_backend >>" == "cudnn" ] && echo "ON" || echo "OFF") \
              -DFL_USE_ONEDNN=$([ "<< parameters.backend >>" == "onednn" ] || [ "<< parameters.autograd_backend >>" == "onednn" ] && echo "ON" || echo "OFF") \
              -DFL_BUILD_DISTRIBUTED=OFF \
              -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON
            cmake --build build --parallel

  test-flashlight:
    parameters:
      path:
        default: "OFF"
        type: string
    steps:
      - run:
          name: "Test Flashlight at << parameters.path >>"
          command: |
            cd << parameters.path >>
            ctest --verbose --parallel 4

  ############################### Old Commands ###############################
  run_codecov_inside_nvidia_docker:
    parameters:
      coverage_flag:
        type: string
    steps:
      - run:
          name: "Get code coverage inside of NVIDIA Docker"
          command: |
            sudo docker exec -it --env CODECOV_TOKEN=$CODECOV_TOKEN flashlight bash -c "\
                DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends lcov curl && \
                cd /flashlight && \
                lcov --capture --directory . --output-file coverage.info && \
                lcov --remove coverage.info '/usr/*' --output-file coverage.info &&
                lcov --remove coverage.info '*/include/af/*' --output-file coverage.info && \
                lcov --remove coverage.info '*/gtest/*' --output-file coverage.info && \
                lcov --list coverage.info && \
                bash <(curl -s https://codecov.io/bash) -f coverage.info \
                -F << parameters.coverage_flag >> \
                -t $CODECOV_TOKEN \
                || echo 'Codecov did not collect coverage reports'"

############################ Jobs ############################
jobs:
  build-flashlight-core:
    parameters:
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    executor: << parameters.platform >>
    steps:
      - checkout
      - install-all-dependencies:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.autograd_backend >>
      - build-flashlight-core:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.backend >>
      - persist_to_workspace:
          root: .
          paths:
            - .

  test-flashlight-core:
    parameters:
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    executor: << parameters.platform >>
    steps:
      - install-all-dependencies:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.autograd_backend >>
      # attach the project root and build directory
      - attach_workspace:
          at: .
      # TODO: enable tests on Windows adding "ctest -C Release ..."
      - test-flashlight:
          path: build/flashlight/fl/test

  build-flashlight-pkg:
    parameters:
      pkg:
        type: string
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
      build_parallelism:
        type: string
        default: ""
    executor: << parameters.platform >>
    steps:
      - install-all-dependencies:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.autograd_backend >>
      - install-pkg-dependencies:
          pkg: << parameters.pkg >>
          platform: << parameters.platform >>
      # attach the project root and build directory
      - attach_workspace:
          at: .
      - run:
          name: "Build Flashlight with << parameters.pkg >> package"
          command: |
            cmake -S . -B build \
              -DFL_BUILD_PKG_RUNTIME=ON \
              -DFL_BUILD_PKG_SPEECH=$([ "<< parameters.pkg >>" == "speech" ] && echo "ON" || echo "OFF") \
              -DFL_BUILD_PKG_VISION=$([ "<< parameters.pkg >>" == "vision" ] && echo "ON" || echo "OFF") \
              -DFL_BUILD_PKG_TEXT=$([ "<< parameters.pkg >>" == "text" ] && echo "ON" || echo "OFF")
            cmake --build build --parallel << parameters.build_parallelism >>
      - persist_to_workspace:
          root: .
          paths:
            - .

  test-flashlight-pkg:
    parameters:
      pkg:
        type: string
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    executor: << parameters.platform >>
    steps:
      - install-all-dependencies:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.autograd_backend >>
      - install-pkg-dependencies:
          pkg: << parameters.pkg >>
          platform: << parameters.platform >>
      # attach the project root and build directory
      - attach_workspace:
          at: .
      - test-flashlight:
          path: build/flashlight/pkg/<<parameters.pkg>>/test

  build-flashlight-apps-for-pkg:
    parameters:
      pkg:
        type: string
      platform:
        type: string
        default: linux
      backend:
        type: string
        default: arrayfire
      autograd_backend:
        type: string
        default: cudnn
      build_parallelism:
        type: string
        default: ""
    executor: << parameters.platform >>
    steps:
      - install-all-dependencies:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.autograd_backend >>
      - install-pkg-dependencies:
          pkg: << parameters.pkg >>
          platform: << parameters.platform >>
      # attach the project root and build directory
      - attach_workspace:
          at: .
      - run:
          name: "Build Flashlight apps for << parameters.pkg >> package"
          command: |
            cmake -S . -B build \
              -DFL_BUILD_APP_ASR=$([ "<< parameters.pkg >>" == "speech" ] && echo "ON" || echo "OFF") \
              -DFL_BUILD_APP_IMGCLASS=$([ "<< parameters.pkg >>" == "vision" ] && echo "ON" || echo "OFF") \
              -DFL_BUILD_APP_OBJDET=$([ "<< parameters.pkg >>" == "vision" ] && echo "ON" || echo "OFF") \
              -DFL_BUILD_APP_LM=$([ "<< parameters.pkg >>" == "text" ] && echo "ON" || echo "OFF")
            cmake --build build --parallel << parameters.build_parallelism >>

workflows:
  version: 2
  build-and-test:
    jobs:
      - build-flashlight-core:
          name: build-flashlight-core-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>
          matrix:
            parameters:
              platform: [linux, windows]
              backend: [arrayfire]
              autograd_backend: [cudnn]

      - test-flashlight-core:
          name: test-flashlight-core-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>
          matrix:
            # Not running all tests with all configurations yet
            parameters:
              platform: [linux]
              backend: [arrayfire]
              autograd_backend: [cudnn]
          requires:
            - build-flashlight-core-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>

      - build-flashlight-core:
          name: build-flashlight-core-<< matrix.platform >>-CPU-<< matrix.backend >>+<< matrix.autograd_backend >>
          matrix:
            parameters:
              platform: [macos-arm, linux-arm]
              backend: [arrayfire, onednn]
              autograd_backend: [onednn]
            exclude:
              - platform: linux-arm
                backend: arrayfire
                autograd_backend: onednn

      - build-flashlight-pkg:
          name: build-flashlight-pkg-<< matrix.pkg>>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>
          matrix:
            parameters:
              pkg: [runtime, speech, vision, text]
              platform: [linux]
              backend: [arrayfire]
              autograd_backend: [cudnn]
              build_parallelism: ["8"]
          requires:
            - build-flashlight-core-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>

      # only run pkg builds and tests for best-supported platforms for now
      - test-flashlight-pkg:
          name: test-flashlight-pkg-<< matrix.pkg>>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>
          matrix:
            parameters:
              pkg: [runtime, speech, vision, text]
              platform: [linux]
              backend: [arrayfire]
              autograd_backend: [cudnn]
          requires:
            - build-flashlight-pkg-<< matrix.pkg >>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>

      # only run app builds for best-supported platforms for now
      - build-flashlight-apps-for-pkg:
          name: build-flashlight-apps-for-pkg-<< matrix.pkg>>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>
          matrix:
            parameters:
              pkg: [runtime, speech, vision, text]
              platform: [linux]
              backend: [arrayfire]
              autograd_backend: [cudnn]
              build_parallelism: ["8"]
          requires:
            - build-flashlight-pkg-<< matrix.pkg >>-<< matrix.platform >>-CUDA-<< matrix.backend >>+<< matrix.autograd_backend >>

      # TODO: eventually add macOS and Linux arm64 baselines for pkg/app
