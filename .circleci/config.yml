# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

version: 2.1

gpu: &gpu
  machine:
    image: ubuntu-1604-cuda-10.1:201909-23
  resource_class: gpu.small

commands:
  ############################### Docker Commands ###############################
  # Docker commands
  authenticate_docker:
    steps:
      - run:
          name: "Authenticate Docker"
          command: |
            if [ ! -z "$DOCKER_USERNAME" ]
            then
                sudo docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD
            fi
  install_nvidia_docker:
    steps:
      - run:
          name: "Install NVIDIA Docker"
          command: |
            sudo apt-get install -y --no-install-recommends nvidia-docker2
            sudo pkill -SIGHUP dockerd
  start_nvidia_docker_and_copy_flashlight_source:
    steps:
      - run:
          name: "Start NVIDIA Docker and Copy Flashlight source"
          command: |
            sudo docker run --runtime=nvidia --rm -itd --ipc=host --name flashlight flml/flashlight:cuda-base-consolidation-latest
            sudo docker exec -it flashlight bash -c "mkdir /flashlight"
            sudo docker cp . flashlight:/flashlight
  build_flashlight_inside_nvidia_docker:
    parameters:
      fl_backend:
        default: "CUDA"
        type: string
      fl_build_fl_core:
        default: "OFF"
        type: string
      fl_build_app_asr:
        default: "OFF"
        type: string
      fl_build_app_img_class:
        default: "OFF"
        type: string
    steps:
      - run:
          name: "Build and Install Flashlight inside of NVIDIA Docker"
          command: |
            sudo docker exec -it flashlight bash -c "\
                apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends gcc-5 g++-5 && \
                cd /flashlight && pwd && ls && mkdir -p build && cd build && \
                export CC=/usr/bin/gcc-5 && export CXX=/usr/bin/g++-5 && \
                export MKLROOT=/opt/intel/mkl && export KENLM_ROOT=/root/kenlm && \
                cmake .. \
                    -DFL_BACKEND=<< parameters.fl_backend >> \
                    -DFL_BUILD_fl_CORE=<< parameters.fl_build_fl_core >> \
                    -DFL_BUILD_APP_ASR=<< parameters.fl_build_app_asr >> \
                    -DFL_BUILD_APP_IMG_CLASS=<< parameters.fl_build_app_img_class >> \
                && \
                make -j$(nproc) && make install
  test_flashlight_inside_nvidia_docker:
    parameters:
      fl_test_apex_dir:
        default: "."
        type: string
    steps:
      - run:
          name: "Test Flashlight inside of NVIDIA Docker"
          command: |
            sudo docker exec -it flashlight bash -c "\
                cd /flashlight/build/<< parameters.fl_test_apex_dir >> && ctest"
  ############################### vcpkg Commands ###############################
  install_gcc_7:
    steps:
      - run:
          name: "Install and setup gcc 7"
          command: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt update || true
            sudo apt install gcc-7 g++-7 -y --no-install-recommends
            sudo rm /usr/bin/gcc /usr/bin/g++
            sudo ln -s /usr/bin/gcc-7 /usr/bin/gcc
            sudo ln -s /usr/bin/g++-7 /usr/bin/g++
  build_vcpkg:
    steps:
      - run:
          name: "Clone and Build vcpkg"
          command: |
            git clone https://github.com/microsoft/vcpkg
            ./vcpkg/bootstrap-vcpkg.sh
  install_vcpkg_prereqs:
    steps:
      - install_gcc_7
      - run:
          name: "Install vcpkg prerequisites"
          command: |
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends gperf automake
  install_vcpkg_deps:
    steps:
      - run:
          name: "Install vcpkg dependencies"
          command: |
            MKLROOT=/opt/intel/mkl ./vcpkg/vcpkg install \
                cuda intel-mkl fftw3 cub kenlm            \
                arrayfire[cuda] cudnn nccl openmpi cereal \
                gflags                                    \
                libsndfile                                \
                stb                                       \
                gtest
  ############################ Dependency Commands ############################
  install_mkl_linux:
    parameters:
      mkl_version:
        default: "intel-mkl-64bit-2020.0-088"
        type: string
    steps:
      - run:
          name: "Install MKL"
          command: |
            cd /tmp
            wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
            sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
            sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'
            apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt install << parameters.mkl_version >>
  install_cuda_linux:
    parameters:
      version:
        default: "10.0"
        type: string
    steps:
      - run:
          name: Install CUDA 10.0
          command: |
            wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-repo-ubuntu1604_10.0.130-1_amd64.deb
            sudo dpkg -i cuda-repo-ubuntu1604_10.0.130-1_amd64.deb
            sudo apt-get update || true
            sudo apt-get --yes --force-yes install cuda
            nvidia-smi
jobs:
  ubuntu1604_gcc5_cuda_10_1_vcpkg_flashlight_lib:
    <<: *gpu
    steps:
      - install_vcpkg_prereqs
      - build_vcpkg
      - install_mkl_linux
      - install_vcpkg_deps
      - install_mkl_linux
      - checkout
      - run:
          name: "Install flashlight-cuda libraries with vcpkg"
          command: |
            cd $HOME/project && mkdir -p build && cd build && \
            cmake .. \
              -DFL_BACKEND=CUDA -DFL_BUILD_CORE=OFF -DFL_BUILD_APP_ASR=OFF -DFL_BUILD_APP_IMG_CLASS=OFF \
              -DCMAKE_TOOLCHAIN_FILE=./vcpkg/scripts/buildsystems/vcpkg.cmake
      - run:
          name: "Run flashlight-cuda libraries tests"
          command: |
            cd $HOME/project/build/flashlight/lib/test && ctest
  # ubuntu1604_gcc5_cuda_10_1_vcpkg_flashlight_fl_core:
  #   <<: *gpu
  #   steps:
  #     - checkout
  #     - build_vcpkg
  #     - install_vcpkg_prereqs
  #     - run:
  #         name: "Install flashlight-cuda fl core with vcpkg"
  #         command: |
  #           ./vcpkg install flashlight-cuda[fl]
  # ubuntu1604_gcc5_cuda_10_1_vcpkg_flashlight_app_asr:
  #   <<: *gpu
  #   steps:
  #     - checkout
  #     - build_vcpkg
  #     - install_vcpkg_prereqs
  #     - run:
  #         name: "Install flashlight-cuda fl core with vcpkg"
  #         command: |
  #           ./vcpkg install flashlight-cuda[asr]
  # ubuntu1604_gcc5_cuda_10_1_vcpkg_flashlight_app_imgclass:
  #   <<: *gpu
  #   steps:
  #     - checkout
  #     - build_vcpkg
  #     - install_vcpkg_prereqs
  #     - run:
  #         name: "Install flashlight-cuda fl core with vcpkg"
  #         command: |
  #           ./vcpkg install flashlight-cuda[imgclass]

  ubuntu1604_gcc5_cuda10_0_docker_flashlight_lib:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "OFF"
          fl_build_app_asr: "OFF"
          fl_build_app_img_class: "OFF"
      - test_flashlight_inside_nvidia_docker:
          fl_test_apex_dir: "flashlight/lib/test"

  ubuntu1604_gcc5_cuda10_0_docker_flashlight_fl_core:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_img_class: "OFF"
      - test_flashlight_inside_nvidia_docker:
          fl_test_apex_dir: "flashlight/fl/test"

  ubuntu1604_gcc5_cuda10_0_docker_flashlight_app_asr:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "ON"
          fl_build_app_img_class: "OFF"
      - test_flashlight_inside_nvidia_docker:
          fl_test_apex_dir: "flashlight/app/asr/test"

  ubuntu1604_gcc5_cuda10_0_docker_flashlight_app_imgclass:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_img_class: "ON"
      # TODO (jacobkahn/padentomasello): add the below once we have tests inside imgclass
      # - test_flashlight_inside_nvidia_docker:
      #     fl_test_apex_dir: "flashlight/app/asr/test"

  build-cpu:
    docker:
      - image: flml/flashlight:cpu-base-consolidation-latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout:
          path: flashlight
      - run:
          name: Build flashlight with CPU backend
          command: |
            cd flashlight && apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends gcc-5 g++-5
            export CC=/usr/bin/gcc-5 && export CXX=/usr/bin/g++-5
            export MKLROOT=/opt/intel/mkl && export KENLM_ROOT=/root/kenlm
            mkdir -p build && cd build
            cmake .. -DFL_BACKEND=CPU -DFL_LIBRARIES_USE_CUDA=OFF
            make -j1 && make install

workflows:
  version: 2
  vcpkg_test_source_build:
    jobs:
      - ubuntu1604_gcc5_cuda_10_1_vcpkg_flashlight_lib
  docker_cuda_build_and_install:
    jobs:
      - ubuntu1604_gcc5_cuda10_0_docker_flashlight_lib
      - ubuntu1604_gcc5_cuda10_0_docker_flashlight_fl_core
      - ubuntu1604_gcc5_cuda10_0_docker_flashlight_app_asr
      - ubuntu1604_gcc5_cuda10_0_docker_flashlight_app_imgclass
  build_and_install:
    jobs:
      - build-cpu
