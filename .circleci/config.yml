# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

version: 2.1

gpu: &gpu
  machine:
    image: ubuntu-1604-cuda-11.1:202012-01
  resource_class: gpu.small

commands:
  ############################### Docker Commands ###############################
  # Docker commands
  authenticate_docker:
    steps:
      - run:
          name: "Authenticate Docker"
          command: |
            if [ ! -z "$DOCKER_USERNAME" ]
            then
                sudo docker login -u=$DOCKER_USERNAME -p=$DOCKER_PASSWORD
            fi
  install_nvidia_docker:
    steps:
      - run:
          name: "Install NVIDIA Docker"
          command: |
            sudo apt-get install -y --no-install-recommends nvidia-docker2
            sudo pkill -SIGHUP dockerd
  start_nvidia_docker_and_copy_flashlight_source:
    steps:
      - run:
          name: "Start NVIDIA Docker and Copy Flashlight source"
          command: |
            sudo docker run --runtime=nvidia --rm -itd --ipc=host --name flashlight flml/flashlight:cuda-base-latest
            sudo docker exec -it flashlight bash -c "mkdir /flashlight"
            sudo docker cp . flashlight:/flashlight
  # Default cmake inside docker will be tested with docker build
  build_flashlight_inside_nvidia_docker:
    parameters:
      fl_backend:
        type: string
      fl_build_fl_core:
        type: string
      fl_build_app_asr:
        type: string
      fl_build_app_imgclass:
        type: string
      fl_build_app_objdet:
        type: string
      fl_build_app_lm:
        type: string
      fl_build_all_pkgs:
        default: "OFF"
        type: string
      build_shared_libs:
        default: "OFF"
        type: string
      fl_code_coverage:
        default: "ON"
        type: string
      version:
        default: "3.10"
        type: string
      version_build:
        default: "1"
        type: string
    steps:
      - run:
          name: "Build and Install Flashlight inside of NVIDIA Docker"
          command: |
            sudo docker exec -it flashlight bash -c "\
            echo 'deb http://archive.ubuntu.com/ubuntu xenial main' | tee /etc/apt/sources.list.d/xenial.list && \
            apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends software-properties-common && \
            apt-add-repository -r universe && apt-add-repository 'deb http://dk.archive.ubuntu.com/ubuntu/ bionic main' && apt-add-repository 'deb http://dk.archive.ubuntu.com/ubuntu/ bionic universe' && apt-get update && \
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends gcc-7 g++-7 && \
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7 &&\
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7 && \
            update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 7 && \
            wget https://cmake.org/files/v<< parameters.version >>/cmake-<< parameters.version >>.<< parameters.version_build >>-Linux-x86_64.sh && \
            mkdir /opt/cmake && \
            sh cmake-<< parameters.version >>.<< parameters.version_build >>-Linux-x86_64.sh --prefix=/opt/cmake --skip-license && \
            ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake && \
            cd /flashlight && pwd && ls && mkdir -p build && cd build && \
            export MKLROOT=/opt/intel/mkl && \
            cmake .. \
                -DFL_BACKEND=<< parameters.fl_backend >> \
                -DFL_BUILD_CORE=<< parameters.fl_build_fl_core >> \
                -DFL_BUILD_APP_ASR=<< parameters.fl_build_app_asr >> \
                -DFL_BUILD_APP_IMGCLASS=<< parameters.fl_build_app_imgclass >> \
                -DFL_BUILD_APP_OBJDET=<< parameters.fl_build_app_objdet >> \
                -DFL_BUILD_APP_LM=<< parameters.fl_build_app_lm >> \
                -DFL_BUILD_ALL_PKGS=<< parameters.fl_build_all_pkgs >> \
                -DFL_BUILD_SHARED_LIBS=<< parameters.build_shared_libs >> \
                -DFL_CODE_COVERAGE=<< parameters.fl_code_coverage >> && \
            make -j$(nproc) && make install"
  test_flashlight_inside_nvidia_docker:
    parameters:
      test_name:
        type: string
        default: ""
      fl_test_apex_dir:
        type: string
    steps:
      - run:
          name: "Test Flashlight inside of NVIDIA Docker:  << parameters.test_name >>"
          command: |
            sudo docker exec -it flashlight bash -c "\
                cd /flashlight/build/<< parameters.fl_test_apex_dir >> && ctest"
  run_codecov_inside_nvidia_docker:
    parameters:
      coverage_flag:
        type: string
    steps:
      - run:
          name: "Get code coverage inside of NVIDIA Docker"
          command: |
            sudo docker exec -it --env CODECOV_TOKEN=$CODECOV_TOKEN flashlight bash -c "\
                DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends lcov curl && \
                cd /flashlight && \
                lcov --capture --directory . --output-file coverage.info && \
                lcov --remove coverage.info '/usr/*' --output-file coverage.info &&
                lcov --remove coverage.info '*/include/af/*' --output-file coverage.info && \
                lcov --remove coverage.info '*/gtest/*' --output-file coverage.info && \
                lcov --list coverage.info && \
                bash <(curl -s https://codecov.io/bash) -f coverage.info \
                -F << parameters.coverage_flag >> \
                -t $CODECOV_TOKEN \
                || echo 'Codecov did not collect coverage reports'"
  ############################### vcpkg Commands ###############################
  install_gcc_7:
    steps:
      - run:
          name: "Install and setup gcc 7"
          command: |
            sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            sudo apt update || true
            sudo apt install gcc-7 g++-7 -y --no-install-recommends
            sudo rm /usr/bin/gcc /usr/bin/g++
            sudo ln -s /usr/bin/gcc-7 /usr/bin/gcc
            sudo ln -s /usr/bin/g++-7 /usr/bin/g++
  build_vcpkg:
    steps:
      - run:
          name: "Clone and Build vcpkg"
          command: |
            git clone https://github.com/microsoft/vcpkg
            ./vcpkg/bootstrap-vcpkg.sh
  install_vcpkg_prereqs:
    steps:
      - install_gcc_7
      - run:
          name: "Install vcpkg prerequisites"
          command: |
            DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends gperf automake
  install_vcpkg_deps:
    parameters:
      vcpkg_deps:
        type: string
    steps:
      - run:
          name: "Install vcpkg dependencies"
          command: |
            MKLROOT=/opt/intel/mkl ./vcpkg/vcpkg install << parameters.vcpkg_deps >>
  flashlight_source_build_with_vcpkg:
    parameters:
      fl_build_fl_core:
        type: string
      fl_build_app_asr:
        type: string
      fl_build_app_imgclass:
        type: string
      fl_build_app_objdet:
        type: string
      fl_build_app_lm:
        type: string
    steps:
      - run:
          name: "Build Flashlight CUDA from source with vcpkg dependencies"
          command: |
            cd $HOME/project && mkdir -p build && cd build
            export MKLROOT=/opt/intel/mkl
            export CUDACXX=/usr/local/cuda/bin/nvcc
            cmake .. \
              -DFL_BACKEND=CUDA \
              -DFL_BUILD_CORE=<< parameters.fl_build_fl_core >> \
              -DFL_BUILD_APP_ASR=<< parameters.fl_build_app_asr >> \
              -DFL_BUILD_APP_IMGCLASS=<< parameters.fl_build_app_imgclass >> \
              -DFL_BUILD_APP_OBJDET=<< parameters.fl_build_app_objdet >> \
              -DFL_BUILD_APP_LM=<< parameters.fl_build_app_lm >> \
              -DCMAKE_TOOLCHAIN_FILE=$HOME/project/vcpkg/scripts/buildsystems/vcpkg.cmake
            make -j$(nproc)
  flashlight_build_and_install_cpu_backend_from_source:
    steps:
      - run:
          name: Build flashlight with CPU backend
          command: |
            echo "deb http://archive.ubuntu.com/ubuntu xenial main" | tee /etc/apt/sources.list.d/xenial.list
            apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends software-properties-common
            apt-add-repository -r universe && apt-add-repository "deb http://dk.archive.ubuntu.com/ubuntu/ bionic main" && apt-add-repository "deb http://dk.archive.ubuntu.com/ubuntu/ bionic universe" && apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends gcc-7 g++-7
            update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-7 7
            update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-7 7
            update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 7
            export MKLROOT=/opt/intel/mkl
            cd flashlight && mkdir -p build && cd build
            cmake .. -DFL_BACKEND=CPU \
                     -DDNNL_DIR=/opt/onednn/lib/cmake/dnnl \
                     -DGloo_DIR=/opt/gloo/share/cmake \
                     -DFL_BUILD_ALL_APPS=ON
            make -j36 && make install
  flashlight_source_test_with_vcpkg:
    parameters:
      fl_test_apex_dir:
        type: string
      test_name:
        type: string
    steps:
      - run:
          name: "Run Flashlight CUDA tests for in-source build with vcpkg dependencies << parameters.test_name >>"
          command: |
            cd $HOME/project/build/<< parameters.fl_test_apex_dir >>
            ctest
  setup_flashlight_compile_and_link_external_project_script:
    steps:
      - run:
          name: Set up script to build another project that depends on flashlight
          command: |
            set +H
            echo "printf '#include <flashlight/fl/flashlight.h>\nint main() { auto x = fl::constant(1.0, 1); auto y = x + 1; return !fl::allClose(y, x + x); }\n' > main.cpp" >> flashlight_compile_and_link_external_project.sh
            echo "printf 'cmake_minimum_required(VERSION 3.10)\nset(CMAKE_CXX_STANDARD 17)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nfind_package(flashlight CONFIG REQUIRED)\nadd_executable(main main.cpp)\ntarget_link_libraries(main PRIVATE flashlight::flashlight)\n' > CMakeLists.txt" >> flashlight_compile_and_link_external_project.sh
            echo "export CC=/usr/bin/gcc-7 && export CXX=/usr/bin/g++-7 && export MKLROOT=/opt/intel/mkl" >> flashlight_compile_and_link_external_project.sh
            echo "mkdir -p build && cd build && cmake .. -DDNNL_DIR=/opt/onednn/lib/cmake/dnnl && make" >> flashlight_compile_and_link_external_project.sh
            echo "./main" >> flashlight_compile_and_link_external_project.sh
  ############################ Dependency Commands ############################
  ubuntu_install_and_setup_cmake:
    parameters:
      version:
        default: "3.10"
        type: string
      version_build:
        default: "1"
        type: string
    steps:
      - run:
          name: "Install and Setup CMake"
          command: |
            cd /tmp
            wget https://cmake.org/files/v<< parameters.version >>/cmake-<< parameters.version >>.<< parameters.version_build >>-Linux-x86_64.sh
            sudo mkdir /opt/cmake
            sudo sh cmake-<< parameters.version >>.<< parameters.version_build >>-Linux-x86_64.sh --prefix=/opt/cmake --skip-license
            sudo ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
  ubuntu_install_and_setup_cmake_in_docker:
    parameters:
      version:
        default: "3.10"
        type: string
      version_build:
        default: "1"
        type: string
    steps:
      - run:
          name: "Install and Setup CMake"
          command: |
            cd /tmp
            wget https://cmake.org/files/v<< parameters.version >>/cmake-<< parameters.version >>.<< parameters.version_build >>-Linux-x86_64.sh
            mkdir /opt/cmake
            sh cmake-<< parameters.version >>.<< parameters.version_build >>-Linux-x86_64.sh --prefix=/opt/cmake --skip-license
            ln -s /opt/cmake/bin/cmake /usr/local/bin/cmake
  ubuntu_install_mkl:
    parameters:
      mkl_version:
        default: "intel-mkl-64bit-2020.0-088"
        type: string
    steps:
      - run:
          name: "Install MKL"
          command: |
            cd /tmp
            wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
            sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB
            sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list'
            sudo apt-get update && DEBIAN_FRONTEND=noninteractive sudo apt install << parameters.mkl_version >>
  ubuntu_install_python_bindings:
    parameters:
      use_mkl:
        type: string
      use_cuda:
        type: string
      use_kenlm:
        type: string
    steps:
      - run:
          name: "Install Flashlight library Python bindings"
          command: |
            pip3 install packaging nose
            cd bindings/python
            export USE_MKL=<< parameters.use_mkl >>
            export USE_CUDA=<< parameters.use_cuda >>
            export USE_KENLM=<< parameters.use_kenlm >>
            python3 setup.py install
            # MKL doesn't work in current docker with CUDA
            export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_def.so:/opt/intel/mkl/lib/intel64/libmkl_avx2.so:/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/mkl/lib/intel64/libmkl_intel_lp64.so:/opt/intel/mkl/lib/intel64/libmkl_intel_thread.so:/opt/intel/lib/intel64_lin/libiomp5.so
            cd .. && python3 -m nose python/tests -vds

############################ Jobs ############################
jobs:
  ubuntu1604_gcc7_cuda_11_1_vcpkg_flashlight_libs:
    <<: *gpu
    steps:
      - checkout
      - ubuntu_install_mkl
      - install_vcpkg_prereqs
      - build_vcpkg
      - install_vcpkg_deps:
          vcpkg_deps: "intel-mkl fftw3 cub kenlm"
      - ubuntu_install_and_setup_cmake:
          version: "3.15"
          version_build: "2"
      - flashlight_source_build_with_vcpkg:
          fl_build_fl_core: "OFF"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "OFF"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "OFF"
      - flashlight_source_test_with_vcpkg:
          test_name: "fl_lib_common"
          fl_test_apex_dir: "flashlight/lib/common/test"
      - flashlight_source_test_with_vcpkg:
          test_name: "fl_lib_audio"
          fl_test_apex_dir: "flashlight/lib/audio/test"
      - flashlight_source_test_with_vcpkg:
          test_name: "fl_lib_text"
          fl_test_apex_dir: "flashlight/lib/text/test"
  ubuntu2004_cuda11_1_docker_flashlight_libs:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "OFF"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "OFF"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "OFF"
      - test_flashlight_inside_nvidia_docker:
          test_name: "fl_lib_common"
          fl_test_apex_dir: "flashlight/lib/common/test"
      - test_flashlight_inside_nvidia_docker:
          test_name: "fl_lib_audio"
          fl_test_apex_dir: "flashlight/lib/audio/test"
      - test_flashlight_inside_nvidia_docker:
          test_name: "fl_lib_text"
          fl_test_apex_dir: "flashlight/lib/text/test"
      - run_codecov_inside_nvidia_docker:
          coverage_flag: "libs"

  ubuntu2004_cuda11_1_docker_flashlight_pkgs:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_all_pkgs: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "OFF"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "OFF"
      - test_flashlight_inside_nvidia_docker:
          test_name: "fl_pkg_speech"
          fl_test_apex_dir: "flashlight/pkg/speech/test"
      - test_flashlight_inside_nvidia_docker:
          test_name: "fl_pkg_vision"
          fl_test_apex_dir: "flashlight/pkg/vision/test"
      - test_flashlight_inside_nvidia_docker:
          test_name: "fl_pkg_text"
          fl_test_apex_dir: "flashlight/pkg/text/test"
      - run_codecov_inside_nvidia_docker:
          coverage_flag: "pkgs"

  ubuntu2004_cuda11_1_docker_flashlight_fl_core:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "OFF"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "OFF"
      - test_flashlight_inside_nvidia_docker:
          fl_test_apex_dir: "flashlight/fl/test"
      - run_codecov_inside_nvidia_docker:
          coverage_flag: "core"

  ubuntu2004_cuda11_1_docker_flashlight_app_asr:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "ON"
          fl_build_app_imgclass: "OFF"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "OFF"

  ubuntu2004_cuda11_1_docker_flashlight_app_imgclass:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "ON"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "OFF"

  ubuntu2004_cuda11_1_docker_flashlight_app_objdet:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "ON"
          fl_build_app_objdet: "ON"
          fl_build_app_lm: "OFF"
      - run_codecov_inside_nvidia_docker:
          coverage_flag: "objdet"

  ubuntu2004_cuda11_1_docker_flashlight_app_lm:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "OFF"
          fl_build_app_imgclass: "OFF"
          fl_build_app_objdet: "OFF"
          fl_build_app_lm: "ON"
      - run_codecov_inside_nvidia_docker:
          coverage_flag: "lm"

  ubuntu2004_cuda11_1_docker_flashlight_all_shared_build:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "ON"
          fl_build_app_imgclass: "ON"
          fl_build_app_objdet: "ON"
          fl_build_app_lm: "ON"
          build_shared_libs: "ON"

  ubuntu2004_cpu_docker_flashlight_all:
    docker:
      - image: flml/flashlight:cpu-base-latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: 2xlarge+
    steps:
      - checkout:
          path: flashlight
      - flashlight_build_and_install_cpu_backend_from_source

  ubuntu2004_cmake10_cpu_docker_flashlight_all:
    docker:
      - image: flml/flashlight:cpu-base-latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: 2xlarge+
    steps:
      - checkout:
          path: flashlight
      - ubuntu_install_and_setup_cmake_in_docker
      - flashlight_build_and_install_cpu_backend_from_source

  ubuntu2004_cpu_python_bindings_simple:
    docker:
      - image: flml/flashlight:cpu-base-latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - ubuntu_install_python_bindings:
          use_cuda: "OFF"
          use_mkl: "OFF"
          use_kenlm: "OFF"

  # Aren't running code, so don't need the NVIDIA runtime
  ubuntu2004_cuda_python_bindings:
    docker:
      - image: flml/flashlight:cuda-base-latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    steps:
      - checkout
      - ubuntu_install_python_bindings:
          use_cuda: "ON"
          use_mkl: "ON"
          use_kenlm: "ON"

  ubuntu2004_cpu_docker_flashlight_build_external:
    docker:
      - image: flml/flashlight:cpu-base-latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD
    resource_class: 2xlarge+
    steps:
      - checkout:
          path: flashlight
      - flashlight_build_and_install_cpu_backend_from_source
      - setup_flashlight_compile_and_link_external_project_script
      - run:
          name: "Build another project that depends on flashlight"
          command: bash flashlight_compile_and_link_external_project.sh

  ubuntu2004_cuda11_1_docker_flashlight_build_external:
    <<: *gpu
    steps:
      - authenticate_docker
      - install_nvidia_docker
      - checkout
      - start_nvidia_docker_and_copy_flashlight_source
      - build_flashlight_inside_nvidia_docker:
          fl_backend: "CUDA"
          fl_build_fl_core: "ON"
          fl_build_app_asr: "ON"
          fl_build_app_imgclass: "ON"
          fl_build_app_objdet: "ON"
          fl_build_app_lm: "ON"
      - setup_flashlight_compile_and_link_external_project_script
      - run:
          name: "Build another project that depends on flashlight"
          command: sudo docker exec -i flashlight bash < flashlight_compile_and_link_external_project.sh

workflows:
  version: 2
  vcpkg_cuda_test_source_build_and_test:
    jobs:
      - ubuntu1604_gcc7_cuda_11_1_vcpkg_flashlight_libs
  docker_cuda_build_test_and_install:
    jobs:
      - ubuntu2004_cuda11_1_docker_flashlight_libs
      - ubuntu2004_cuda11_1_docker_flashlight_pkgs
      - ubuntu2004_cuda11_1_docker_flashlight_fl_core
      - ubuntu2004_cuda11_1_docker_flashlight_app_asr
      - ubuntu2004_cuda11_1_docker_flashlight_app_imgclass
      - ubuntu2004_cuda11_1_docker_flashlight_app_objdet
      - ubuntu2004_cuda11_1_docker_flashlight_app_lm
      - ubuntu2004_cuda11_1_docker_flashlight_all_shared_build
  docker_cpu_build_and_install:
    jobs:
      - ubuntu2004_cpu_docker_flashlight_all
      - ubuntu2004_cmake10_cpu_docker_flashlight_all
  build_external_project_with_flashlight_dependency:
    jobs:
      - ubuntu2004_cpu_docker_flashlight_build_external
      - ubuntu2004_cuda11_1_docker_flashlight_build_external
  test_python_bindings:
    jobs:
      - ubuntu2004_cpu_python_bindings_simple
      - ubuntu2004_cuda_python_bindings
