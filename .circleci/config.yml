# Copyright (c) Facebook, Inc. and its affiliates.
# All rights reserved.
#
# This source code is licensed under the BSD-style license found in the
# LICENSE file in the root directory of this source tree.

version: 2.1

gpu: &gpu
  machine:
    image: ubuntu-2004-cuda-11.4:202110-01
  resource_class: gpu.nvidia.large

orbs:
  win: circleci/windows@5.0.0

executors:
  linux:
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.medium
  windows:
    machine:
      image: windows-server-2019-nvidia:stable
    resource_class: windows.gpu.nvidia.medium
    shell: bash.exe

commands:
  install-build-dependencies:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["macos", << parameters.platform >>]
          steps:
            - run:
                name: "Install CMake from Homebrew"
                command: brew install cmake
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install CMake from Choco"
                command: choco install cmake
            - run:
                name: "Set PATH to find CMake"
                command: echo 'export PATH="/c/Program Files/CMake/bin:${PATH}"' >> $BASH_ENV

  setup-cuda:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Add CUDA 11.4 bin directory to PATH"
                command: |
                  echo 'export PATH="/usr/local/cuda-11.4/bin:${PATH}"' >> "$BASH_ENV"
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - install-cuda:
                platform: << parameters.platform >>
            - run:
                name: "Remove CUDA 10.1 and copy new MSVC Build Customizations"
                command: |
                  export _MSVC_BUILDCUST_PATH="/c/Program Files (x86)/Microsoft Visual Studio/2019/Community/MSBuild/Microsoft/VC/v160/BuildCustomizations"
                  rm -rf /c/Program\ Files/NVIDIA\ GPU\ Computing\ Toolkit/CUDA/v10.1
                  for ext in props targets xml; do rm "${_MSVC_BUILDCUST_PATH}/CUDA 10.1.${ext}"; done
                  cp /c/Program\ Files/NVIDIA\ GPU\ Computing\ Toolkit/CUDA/v11.5/extras/visual_studio_integration/MSBuildExtensions/* "${_MSVC_BUILDCUST_PATH}"
            - run:
                name: "Add CUDA bin directory to PATH and set env vars"
                command: |
                  echo 'export PATH="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/bin/:${PATH}"' >> "$BASH_ENV"
                  echo 'export CUDA_PATH="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5"' >> "$BASH_ENV"

  install-arrayfire:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Install ArrayFire 3.8.1  with CUDA 11.4"
                command: |
                  sudo apt update
                  sudo apt install -y gnupg2 ca-certificates apt-utils software-properties-common
                  sudo apt update
                  sudo apt-key adv --fetch-key https://repo.arrayfire.com/GPG-PUB-KEY-ARRAYFIRE-2020.PUB
                  echo "deb [arch=amd64] https://repo.arrayfire.com/debian all main" | sudo tee /etc/apt/sources.list.d/arrayfire.list
                  sudo apt update
                  sudo apt install arrayfire-cmake=3.8.1-2 arrayfire-headers=3.8.1-2
                  sudo apt install arrayfire-cuda3-cuda-11-4=3.8.1-2 arrayfire-cuda3-dev=3.8.1-2

      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install 7zip and axel from choco"
                command: |
                  choco install 7zip axel
            - run:
                name: "Download and Install ArrayFire 3.8.1"
                command: |
                  cd $HOME
                  export AF_INSTALLER_NAME="ArrayFire-v3.8.1-CUDA-11.4.exe"
                  axel -n 16 https://arrayfire.s3.amazonaws.com/3.8.1/$AF_INSTALLER_NAME
                  7z.exe x $AF_INSTALLER_NAME -o"C:\Program Files\ArrayFire" -y
                  rm $AF_INSTALLER_NAME
                shell: bash.exe

  install-cuda:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install wget from choco"
                command: |
                  choco install wget
            - run:
                name: "Install CUDA 11.5"
                command: |
                  cd $HOME
                  # See  https://docs.nvidia.com/cuda/pdf/CUDA_Installation_Guide_Windows.pdf
                  export CUDA_INSTALLER_NAME="cuda_11.5.2_496.13_windows.exe"
                  export CudaToolkitDir="C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.5"
                  wget https://developer.download.nvidia.com/compute/cuda/11.5.2/local_installers/$CUDA_INSTALLER_NAME
                  # List of CUDA install options is https://docs.nvidia.com/cuda/cuda-installation-guide-microsoft-windows/index.html
                  ./$CUDA_INSTALLER_NAME -s nvcc_11.5 cudart_11.5 cublas_dev_11.5 curand_dev_11.5 visual_studio_integration_11.5
                  rm $CUDA_INSTALLER_NAME
                  echo 'export CUDA_ROOT="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v11.5/"' >> $BASH_ENV
                  echo 'export CudaToolkitDir=${CudaToolkitDir}' >> $BASH_ENV
                shell: bash.exe

  install-cudnn:
    parameters:
      platform:
        type: string
    steps:
      - when:
          condition:
            equal: ["linux", << parameters.platform >>]
          steps:
            - run:
                name: "Install cuDNN 8.5.0.96 for CUDA 11.7"
                command: |
                  cd /tmp
                  wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8_8.5.0.96-1+cuda11.7_amd64.deb
                  wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/libcudnn8-dev_8.5.0.96-1+cuda11.7_amd64.deb
                  sudo dpkg -i libcudnn8_8.5.0.96-1+cuda11.7_amd64.deb libcudnn8-dev_8.5.0.96-1+cuda11.7_amd64.deb
      - when:
          condition:
            equal: ["windows", << parameters.platform >>]
          steps:
            - run:
                name: "Install cuDNN 8.5.0.96 for CUDA 11.2"
                command: |
                  cd $HOME
                  export CUDNN_ZIP=cudnn-11.2-windows-x64-v8.1.1.33.zip
                  wget https://developer.download.nvidia.com/compute/redist/cudnn/v8.1.1/$CUDNN_ZIP
                  unzip $CUDNN_ZIP && rm $CUDNN_ZIP
                  cp -r cuda/* "$CUDA_ROOT"
                  rm -rf cuda/

  build_flashlight:
    parameters:
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    steps:
      - run:
          name: "Build Flashlight"
          command: |
            cmake -S . -B build \
              -DFL_USE_ARRAYFIRE=ON \
              -DFL_ARRAYFIRE_USE_CUDA=ON \
              -DFL_USE_CUDNN=ON \
              -DFL_ARRAYFIRE_USE_CPU=OFF \
              -DFL_USE_ONEDNN=OFF \
              -DFL_BUILD_DISTRIBUTED=OFF \
              -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=ON
            cmake --build build --parallel

  test_flashlight:
    parameters:
      path:
        default: "OFF"
        type: string
    steps:
      - run:
          name: "Test Flashlight"
          command: |
            cd << parameters.path >>
            ctest --verbose --parallel 4

  ############################### Old Commands ###############################
  run_codecov_inside_nvidia_docker:
    parameters:
      coverage_flag:
        type: string
    steps:
      - run:
          name: "Get code coverage inside of NVIDIA Docker"
          command: |
            sudo docker exec -it --env CODECOV_TOKEN=$CODECOV_TOKEN flashlight bash -c "\
                DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends lcov curl && \
                cd /flashlight && \
                lcov --capture --directory . --output-file coverage.info && \
                lcov --remove coverage.info '/usr/*' --output-file coverage.info &&
                lcov --remove coverage.info '*/include/af/*' --output-file coverage.info && \
                lcov --remove coverage.info '*/gtest/*' --output-file coverage.info && \
                lcov --list coverage.info && \
                bash <(curl -s https://codecov.io/bash) -f coverage.info \
                -F << parameters.coverage_flag >> \
                -t $CODECOV_TOKEN \
                || echo 'Codecov did not collect coverage reports'"

############################ Jobs ############################
jobs:
  build-and-test-main:
    parameters:
      platform:
        type: string
      backend:
        type: string
      autograd_backend:
        type: string
    executor: << parameters.platform >>
    steps:
      - checkout
      - install-build-dependencies:
          platform: << parameters.platform >>
      - setup-cuda:
          platform: << parameters.platform >>
      - when:
          condition:
            equal: ["arrayfire", << parameters.backend >>]
          steps:
            - install-arrayfire:
                platform: << parameters.platform >>
      - when:
          condition:
            equal: ["cudnn", << parameters.autograd_backend >>]
          steps:
            - install-cudnn:
                platform: << parameters.platform >>
      - build_flashlight:
          platform: << parameters.platform >>
          backend: << parameters.backend >>
          autograd_backend: << parameters.backend >>
      - test_flashlight:
          path: build/flashlight/fl/test

workflows:
  version: 2
  build-and-test-new:
    jobs:
      - build-and-test-main:
          name: "Build and Test << matrix.platform >> with << matrix.backend >> and << matrix.autograd_backend >>"
          matrix:
            parameters:
              platform: [linux, windows]
              backend: [arrayfire]
              autograd_backend: [cudnn]
